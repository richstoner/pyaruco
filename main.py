__author__ = 'radlab'

#from pyaruco import detect_markers

import logging

logging.basicConfig(level=logging.DEBUG)

import cv
import cv2

import os
import sys
import numpy as np
from numpy import array

#from PIL import Image
# import ctypes
# import ctypes.util
# name = ctypes.util.find_library(r'C:\Users\radlab\drone_demo\native\build32\third-party\aruco-1.0.0\bin\Release\caruco')
# dll = ctypes.windll.LoadLibrary(name)

import yaml
def opencv_matrix(loader, node):
    mapping = loader.construct_mapping(node)
    seq = loader.construct_sequence(node.value[-1][1])
    mat = np.array(seq,dtype=np.float64)
    mat.resize(mapping["rows"], mapping["cols"])
    return mat

yaml.add_constructor(u"tag:yaml.org,2002:opencv-matrix", opencv_matrix)



def main():
    """The main entry point of the program."""

    # Check the command-line arcuments.
    # if len(sys.argv) < 3:
    #   print('usage: aruco.py input.png output.png')
    #   sys.exit(1)

    # This is probably the simplest possible example.
    input_test = 'simple_board_1.png'
    output_test = 'test_out_new.png'

    # in order for this to work, you need to strip the %YAML:1.0 from the file generated by opencv calibration
    camera_configuration_name = 'camera.yml'
    camera_configuration = []
    with open(camera_configuration_name) as fin:
        camera_configuration = yaml.load(fin.read())

    print camera_configuration.keys()


    input_image = cv2.imread(input_test,

    #im = Image.open(input_test).convert('RGB')
    #arr = array(im)

    #[m.draw(arr) for m in detect_markers(im)]
    #Image.fromarray(arr).save(output_test, 'PNG')



if __name__ == '__main__':
    main()
